{"version":3,"sources":["../src/index.ts","../src/lib/EmbeddedVoice.ts"],"sourcesContent":["export * from './lib/EmbeddedVoice';\n\nexport {\n  COLLAPSE_WIDGET_ACTION,\n  EXPAND_WIDGET_ACTION,\n  MINIMIZE_WIDGET_ACTION,\n  RESIZE_FRAME_ACTION,\n  TRANSCRIPT_MESSAGE_ACTION,\n  WIDGET_IFRAME_IS_READY_ACTION,\n  parseClientToFrameAction,\n  LanguageModelOption,\n} from '@humeai/voice-embed';\n\nexport type {\n  AssistantTranscriptMessage,\n  SocketConfig,\n  FrameToClientAction,\n  JSONMessage,\n  UserTranscriptMessage,\n  WindowDimensions,\n  EmotionScores,\n} from '@humeai/voice-embed';\n","import {\n  type CloseHandler,\n  EmbeddedVoice as EA,\n  type EmbeddedVoiceConfig,\n  type TranscriptMessageHandler,\n} from '@humeai/voice-embed';\nimport { useEffect, useRef } from 'react';\n\ntype EmbeddedVoiceProps = Partial<EmbeddedVoiceConfig> &\n  NonNullable<Pick<EmbeddedVoiceConfig, 'auth'>> & {\n    onMessage?: TranscriptMessageHandler;\n    onClose?: CloseHandler;\n    isEmbedOpen: boolean;\n    openOnMount?: boolean;\n  };\n\nexport const EmbeddedVoice = (props: EmbeddedVoiceProps) => {\n  const {\n    onMessage,\n    isEmbedOpen,\n    onClose,\n    openOnMount = false,\n    ...config\n  } = props;\n  const embeddedVoice = useRef<EA | null>(null);\n  const onMessageHandler = useRef<TranscriptMessageHandler | undefined>();\n  onMessageHandler.current = onMessage;\n\n  const onCloseHandler = useRef<CloseHandler | undefined>();\n  onCloseHandler.current = onClose;\n\n  const stableConfig = useRef<\n    Partial<EmbeddedVoiceConfig> &\n      NonNullable<Pick<EmbeddedVoiceConfig, 'auth'>>\n  >();\n  stableConfig.current = config;\n\n  useEffect(() => {\n    let unmount: () => void;\n    if (!embeddedVoice.current && stableConfig.current) {\n      embeddedVoice.current = EA.create({\n        onMessage: onMessageHandler.current,\n        onClose: onCloseHandler.current,\n        openOnMount: openOnMount,\n        ...stableConfig.current,\n      });\n      unmount = embeddedVoice.current.mount();\n    }\n\n    return () => {\n      unmount?.();\n      embeddedVoice.current = null;\n    };\n  }, [openOnMount]);\n\n  useEffect(() => {\n    if (isEmbedOpen) {\n      embeddedVoice.current?.openEmbed();\n    }\n  }, [isEmbedOpen]);\n\n  return null;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,yBAKO;AACP,mBAAkC;AAU3B,IAAM,gBAAgB,CAAC,UAA8B;AAC1D,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA,cAAc;AAAA,IACd,GAAG;AAAA,EACL,IAAI;AACJ,QAAM,oBAAgB,qBAAkB,IAAI;AAC5C,QAAM,uBAAmB,qBAA6C;AACtE,mBAAiB,UAAU;AAE3B,QAAM,qBAAiB,qBAAiC;AACxD,iBAAe,UAAU;AAEzB,QAAM,mBAAe,qBAGnB;AACF,eAAa,UAAU;AAEvB,8BAAU,MAAM;AACd,QAAI;AACJ,QAAI,CAAC,cAAc,WAAW,aAAa,SAAS;AAClD,oBAAc,UAAU,mBAAAA,cAAG,OAAO;AAAA,QAChC,WAAW,iBAAiB;AAAA,QAC5B,SAAS,eAAe;AAAA,QACxB;AAAA,QACA,GAAG,aAAa;AAAA,MAClB,CAAC;AACD,gBAAU,cAAc,QAAQ,MAAM;AAAA,IACxC;AAEA,WAAO,MAAM;AACX,gBAAU;AACV,oBAAc,UAAU;AAAA,IAC1B;AAAA,EACF,GAAG,CAAC,WAAW,CAAC;AAEhB,8BAAU,MAAM;AACd,QAAI,aAAa;AACf,oBAAc,SAAS,UAAU;AAAA,IACnC;AAAA,EACF,GAAG,CAAC,WAAW,CAAC;AAEhB,SAAO;AACT;;;AD5DA,IAAAC,sBASO;","names":["EA","import_voice_embed"]}