'use client';
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  COLLAPSE_WIDGET_ACTION: () => import_voice_embed2.COLLAPSE_WIDGET_ACTION,
  EXPAND_WIDGET_ACTION: () => import_voice_embed2.EXPAND_WIDGET_ACTION,
  EmbeddedVoice: () => EmbeddedVoice,
  LanguageModelOption: () => import_voice_embed2.LanguageModelOption,
  MINIMIZE_WIDGET_ACTION: () => import_voice_embed2.MINIMIZE_WIDGET_ACTION,
  RESIZE_FRAME_ACTION: () => import_voice_embed2.RESIZE_FRAME_ACTION,
  TRANSCRIPT_MESSAGE_ACTION: () => import_voice_embed2.TRANSCRIPT_MESSAGE_ACTION,
  WIDGET_IFRAME_IS_READY_ACTION: () => import_voice_embed2.WIDGET_IFRAME_IS_READY_ACTION,
  parseClientToFrameAction: () => import_voice_embed2.parseClientToFrameAction
});
module.exports = __toCommonJS(src_exports);

// src/lib/EmbeddedVoice.ts
var import_voice_embed = require("@humeai/voice-embed");
var import_react = require("react");
var EmbeddedVoice = (props) => {
  const {
    onMessage,
    isEmbedOpen,
    onClose,
    openOnMount = false,
    ...config
  } = props;
  const embeddedVoice = (0, import_react.useRef)(null);
  const onMessageHandler = (0, import_react.useRef)();
  onMessageHandler.current = onMessage;
  const onCloseHandler = (0, import_react.useRef)();
  onCloseHandler.current = onClose;
  const stableConfig = (0, import_react.useRef)();
  stableConfig.current = config;
  (0, import_react.useEffect)(() => {
    let unmount;
    if (!embeddedVoice.current && stableConfig.current) {
      embeddedVoice.current = import_voice_embed.EmbeddedVoice.create({
        onMessage: onMessageHandler.current,
        onClose: onCloseHandler.current,
        openOnMount,
        ...stableConfig.current
      });
      unmount = embeddedVoice.current.mount();
    }
    return () => {
      unmount?.();
      embeddedVoice.current = null;
    };
  }, [openOnMount]);
  (0, import_react.useEffect)(() => {
    if (isEmbedOpen) {
      embeddedVoice.current?.openEmbed();
    }
  }, [isEmbedOpen]);
  return null;
};

// src/index.ts
var import_voice_embed2 = require("@humeai/voice-embed");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  COLLAPSE_WIDGET_ACTION,
  EXPAND_WIDGET_ACTION,
  EmbeddedVoice,
  LanguageModelOption,
  MINIMIZE_WIDGET_ACTION,
  RESIZE_FRAME_ACTION,
  TRANSCRIPT_MESSAGE_ACTION,
  WIDGET_IFRAME_IS_READY_ACTION,
  parseClientToFrameAction
});
//# sourceMappingURL=index.js.map